% Copyright 2013 Max-Planck-Institut für Eisenforschung GmbH
function [handles, indent_parameters] = ...
    preCPFE_buttons_indenter(x0, hu, wu, scratchTest)
%% Function to create buttons to set indenter
% x0: origin of x coordinate
% hu: heigth unit
% wu: width unit
% scratchTest: boolean variable (0 for indentation test and 1 for scratch test)

% author: d.mercier@mpie.de

indent_parameters.coneAngle = 90; %in microns
indent_parameters.tipRadius = 1; % in degrees
indent_parameters.h_indent = 0.3; % in microns
indent_parameters.scratchLength = 3; % in microns
indent_parameters.scratchDirection = 270; % in degrees

parent = gcf;
fontSize = 10;
BackGroundColor = [0.9 0.9 0.9];

%% Pop-up menu to set the indenter
handles.pm_indenter = uicontrol('Parent', parent,...
    'Units', 'normalized',...
    'Position', [22*x0 hu*19 wu*3 hu*0.8],...
    'Style', 'popup',...
    'String', {'Sphero-Conical Indenter'; 'Berkovich Indenter'; ...
    'Vickers indenter'; 'Cube Corner'; 'Flat Punch'; 'AFM topography'},...
    'Value', 1,...
    'Callback', 'preCPFE_set_indenter;');

%% Button to move the indenter
handles.move = uicontrol('Parent', parent,...
    'Units', 'normalized',...
    'Position', [22*x0+3*wu hu*19 wu*.8 hu*0.9],...
    'Style', 'togglebutton',...
    'String', 'Move',...
    'visible','off',...
    'Callback', 'preCPFE_set_indenter');

%% Pop-up menu to set the indenter properties
[handles.coneAngle_str, handles.coneAngle_val] = ...
    set_inputs_boxes({'Full Angle of conical indenter (degrees)'}, ...
    [22*x0 hu*18.5 wu*3 hu*0.5], indent_parameters.coneAngle, ...
    'preCPFE_set_indenter');

[handles.tipRadius_str, handles.tipRadius_val] = ...
    set_inputs_boxes({'Tip radius of indenter (microns)'}, ...
    [22*x0 hu*18 wu*3 hu*0.5], indent_parameters.tipRadius, ...
    'preCPFE_set_indenter');

[handles.friction_coeff_str, handles.friction_coeff_val] = ...
    set_inputs_boxes({'Friction coefficient'}, ...
    [22*x0 hu*17.5 wu*3 hu/2], '0.3', 'preCPFE_set_indenter');

[handles.h_indent_str, handles.h_indent_val]  = ...
    set_inputs_boxes({'Indentation depth (microns)'}, ...
    [22*x0 hu*17 wu*3 hu*0.5], indent_parameters.h_indent, ...
    'preCPFE_set_indenter');

set(handles.h_indent_str, 'Style','togglebutton', ...
    'Callback', 'preCPFE_set_indenter');

%% Creation of string boxes and edit boxes for the calculation of the transition depth
handles.trans_depth = set_inputs_boxes('', ...
    [22*x0 hu*16.5 wu*3 hu/2], '', '', 1);

%% Pop-up menu to set the mesh for AFM topography of indenter
handles.pm_indenter_mesh_quality = uicontrol('Parent', parent,...
    'Units', 'normalized',...
    'Position', [22*x0 hu*16.4 wu*3 hu*0.5],...
    'Style', 'popup',...
    'String', {'Indenter - Very coarse mesh'; 'Indenter - Coarse mesh';...
    'Indenter - Fine mesh'; 'Indenter - Very fine mesh';....
    'Indenter - Ultra fine mesh'},...
    'Value', 3,...
    'visible', 'off',...
    'Callback', 'preCPFE_set_indenter');

handles.load_AFM = set_pushbutton('Load AFM', ...
    [22*x0+wu*3 hu*16.3 wu*1 hu*0.6], ...
    'preCPFE_load_AFM_indenter; preCPFE_set_indenter');

%% Slide bar to rotate indenter
handles.rotate_loaded_indenter_str = uicontrol('Parent', parent,...
    'Units', 'normalized',...
    'Position', [22*x0 hu*15.7 wu*3 hu*0.5],...
    'Style', 'text',...
    'String', 'Rotate indenter [0 .. 360°]',...
    'visible', 'off');

handles.rotate_loaded_indenter = uicontrol('Parent', parent,...
    'Units', 'normalized',...
    'Style', 'slider',...
    'Min', 0, 'Max', 360, 'Value', 0,...
    'Position', [22*x0 hu*15.1 wu*3 hu*0.5],...
    'visible', 'off',...
    'Callback', 'preCPFE_set_indenter');
set(handles.rotate_loaded_indenter, 'SliderStep',[1/3600 .16]) % 0.1° steps

handles.rotate_loaded_indenter_box = uicontrol('Parent', parent,...
    'Units', 'normalized',...
    'BackgroundColor', BackGroundColor,...
    'Position', [22*x0+3.01*wu hu*15 wu*0.5 hu*0.5],...
    'String', '0',...
    'Style', 'text',...
    'HorizontalAlignment', 'right', ...
    'Visible', 'off');

handles.rotate_loaded_indenter_unit = uicontrol('Parent', parent,...
    'Units', 'normalized',...
    'Position', [22*x0+3.57*wu hu*15 wu*0.05 hu*0.5],...
    'Style', 'text',...
    'String', '°',...
    'HorizontalAlignment', 'left', ...
    'visible', 'off');

set([handles.pm_indenter, handles.move, ...
    handles.rotate_loaded_indenter_str, handles.load_AFM, ...
    handles.rotate_loaded_indenter_unit, handles.pm_indenter_mesh_quality], ...       
    'BackgroundColor', BackGroundColor,...
    'FontWeight', 'bold',...
    'FontSize', fontSize,...
    'HorizontalAlignment', 'center');

%% Set scratch test parameters (length and direction)
if scratchTest
    [handles.scratchLength_str, handles.scratchLength_val] = ...
    set_inputs_boxes({'Scratch length (microns)'}, ...
    [22*x0 hu*14.5 wu*3 hu*0.5], indent_parameters.scratchLength, ...
    'preCPFE_indentation_setting_BX');

    [handles.scratchDirection_str, handles.scratchDirection_val] = ...
    set_inputs_boxes({'Scratch direction (degrees)'}, ...
    [22*x0 hu*14 wu*3 hu*0.5], indent_parameters.scratchDirection, ...
    'preCPFE_indentation_setting_BX');
    % (0 along x-axis and 90 along y axis, from 0 to 360)
end

end